import requests
import ccxt
from binance.client import Client
from config.config import BINANCE_API_KEY, BINANCE_API_SECRET

# Binance Testnet BaÄŸlantÄ±sÄ±
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET, testnet=True)

# **ğŸ“Œ Binance API'den OHLCV Verisi Ã‡ek**
def get_binance_ohlcv(symbol="BTCUSDT", interval="1h", limit=100):
    """
    Binance API'den OHLCV (AÃ§Ä±lÄ±ÅŸ, YÃ¼ksek, DÃ¼ÅŸÃ¼k, KapanÄ±ÅŸ, Hacim) verisi al.
    """
    API_URL = f"https://api.binance.com/api/v3/klines"
    params = {"symbol": symbol, "interval": interval, "limit": limit}
    response = requests.get(API_URL, params=params).json()
    
    return [{"timestamp": candle[0], "open": float(candle[1]), "high": float(candle[2]), 
             "low": float(candle[3]), "close": float(candle[4]), "volume": float(candle[5])} 
            for candle in response]

# **ğŸ“Œ Binance Futures'ta Ä°ÅŸlem AÃ§**
def execute_trade(symbol, trade_type, quantity, leverage):
    """
    Binance Futures'ta iÅŸlem aÃ§ar.
    :param symbol: Ä°ÅŸlem Ã§ifti (BTCUSDT, ETHUSDT vb.)
    :param trade_type: "LONG" veya "SHORT"
    :param quantity: Ä°ÅŸlem miktarÄ±
    :param leverage: KaldÄ±raÃ§ oranÄ± (1x - 10x arasÄ± AI destekli hesaplanÄ±r)
    """
    client.futures_change_leverage(symbol=symbol, leverage=leverage)
    side = "BUY" if trade_type == "LONG" else "SELL"

    order = client.futures_create_order(
        symbol=symbol,
        side=side,
        type="MARKET",
        quantity=quantity
    )

    print(f"ğŸš€ {trade_type} Pozisyon AÃ§Ä±ldÄ±: {symbol}, Miktar: {quantity}, KaldÄ±raÃ§: {leverage}x")
    return order

# **ğŸ“Œ Binance API'den Mevcut AÃ§Ä±k PozisyonlarÄ± Al**
def get_open_positions():
    """
    Binance Futures'taki aÃ§Ä±k pozisyonlarÄ± getirir.
    """
    positions = client.futures_account()["positions"]
    open_positions = [pos for pos in positions if float(pos["positionAmt"]) != 0]
    
    return open_positions

# **ğŸ“Œ Binance API'den GerÃ§ek ZamanlÄ± Piyasa FiyatÄ±nÄ± Al**
def get_binance_price(symbol="BTCUSDT"):
    """
    Binance API'den gerÃ§ek zamanlÄ± piyasa fiyatÄ±nÄ± alÄ±r.
    """
    ticker = client.futures_symbol_ticker(symbol=symbol)
    return float(ticker["price"])

# **ğŸ“Œ Binance API'den KaldÄ±raÃ§ DeÄŸiÅŸimi**
def change_leverage(symbol, leverage):
    """
    Binance Futures kaldÄ±raÃ§ oranÄ±nÄ± deÄŸiÅŸtirir.
    """
    client.futures_change_leverage(symbol=symbol, leverage=leverage)
    print(f"ğŸ”§ {symbol} iÃ§in KaldÄ±raÃ§ DeÄŸiÅŸtirildi: {leverage}x")

# **ğŸ“Œ Binance API'den Likidite DerinliÄŸi Ã‡ek**
def get_market_depth(symbol="BTCUSDT", limit=10):
    """
    Binance API'den emir defteri (order book) likidite derinliÄŸini Ã§eker.
    """
    depth = client.futures_order_book(symbol=symbol, limit=limit)
    return {"bids": depth["bids"], "asks": depth["asks"]}

# **ğŸ“Œ Binance API'den Fonlama OranlarÄ±nÄ± Al**
def get_funding_rate(symbol="BTCUSDT"):
    """
    Binance API'den fonlama oranlarÄ±nÄ± alÄ±r.
    """
    funding_info = client.futures_funding_rate(symbol=symbol, limit=1)
    return float(funding_info[0]["fundingRate"])
