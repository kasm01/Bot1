import numpy as np
import pandas as pd
import arch  # GARCH modeli iÃ§in
import matplotlib.pyplot as plt
from trading.binance_futures import execute_trade
from notifications.telegram_bot import send_telegram_message

# **ğŸ“Œ GARCH Modeli ile Volatilite Tahmini**
def train_garch_model(price_data):
    """
    GARCH(1,1) modelini eÄŸit ve volatiliteyi tahmin et.
    :param price_data: GeÃ§miÅŸ fiyat verileri (numpy array)
    :return: EÄŸitilmiÅŸ model ve volatilite tahminleri
    """
    df = pd.DataFrame(price_data, columns=["Close"])
    log_returns = np.log(df["Close"]).diff().dropna()  # Log getirileri hesapla

    model = arch.arch_model(log_returns, vol="Garch", p=1, q=1)
    fitted_model = model.fit(disp="off")  # Modeli eÄŸit

    volatility_forecast = fitted_model.forecast(start=0).variance[-1:].values[0] ** 0.5  # Son volatilite tahmini
    return fitted_model, volatility_forecast

# **ğŸ“Œ GARCH Volatilite Tahminini GÃ¶rselleÅŸtir**
def plot_garch_volatility(price_data):
    """
    GARCH modeli ile tahmin edilen volatiliteyi gÃ¶rselleÅŸtirir.
    """
    model, volatility_forecast = train_garch_model(price_data)
    volatility_series = model.conditional_volatility
    
    plt.figure(figsize=(12, 6))
    plt.plot(volatility_series, label="GARCH Tahmini Volatilite")
    plt.xlabel("Zaman")
    plt.ylabel("Volatilite")
    plt.title("ğŸ“Š GARCH Modeli ile Volatilite Tahmini")
    plt.legend()
    plt.show()

# **ğŸ“Œ AI Destekli KaldÄ±raÃ§ YÃ¶netimi**
def garch_based_leverage(price_data):
    """
    GARCH modeli ile volatiliteye baÄŸlÄ± olarak AI destekli kaldÄ±raÃ§ hesaplar.
    :param price_data: GeÃ§miÅŸ fiyat verileri
    :return: Optimal kaldÄ±raÃ§ oranÄ± (1x - 10x)
    """
    _, volatility_forecast = train_garch_model(price_data)

    if volatility_forecast < 0.01:
        return 10  # DÃ¼ÅŸÃ¼k volatilite, yÃ¼ksek kaldÄ±raÃ§
    elif volatility_forecast < 0.03:
        return 5
    elif volatility_forecast < 0.05:
        return 3
    else:
        return 1  # YÃ¼ksek volatilite, dÃ¼ÅŸÃ¼k kaldÄ±raÃ§

# **ğŸ“Œ GARCH'a GÃ¶re AI Destekli Ä°ÅŸlem AÃ§ma**
def garch_trade_decision(price_data):
    """
    GARCH Modeli sonucuna gÃ¶re alÄ±m/satÄ±m stratejisi belirler.
    """
    leverage = garch_based_leverage(price_data)
    trade_type = "LONG" if np.random.rand() > 0.5 else "SHORT"

    execute_trade("BTCUSDT", trade_type, quantity=0.01, leverage=leverage)
    send_telegram_message(f"ğŸ“Š GARCH Modeli: AI destekli iÅŸlem aÃ§Ä±ldÄ±.\nÄ°ÅŸlem TÃ¼rÃ¼: {trade_type} | KaldÄ±raÃ§: {leverage}x")
    
    return trade_type, leverage
